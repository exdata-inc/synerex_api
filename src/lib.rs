// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `synerex.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:api.Response.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:api.Response.err)
    pub err: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &Response| { &m.ok },
            |m: &mut Response| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "err",
            |m: &Response| { &m.err },
            |m: &mut Response| { &mut m.err },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                18 => {
                    self.err = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if !self.err.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if !self.err.is_empty() {
            os.write_string(2, &self.err)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.err.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            ok: false,
            err: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.ConfirmResponse)
pub struct ConfirmResponse {
    // message fields
    // @@protoc_insertion_point(field:api.ConfirmResponse.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:api.ConfirmResponse.mbus_id)
    pub mbus_id: u64,
    // @@protoc_insertion_point(field:api.ConfirmResponse.wait)
    pub wait: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:api.ConfirmResponse.err)
    pub err: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.ConfirmResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConfirmResponse {
    fn default() -> &'a ConfirmResponse {
        <ConfirmResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConfirmResponse {
    pub fn new() -> ConfirmResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &ConfirmResponse| { &m.ok },
            |m: &mut ConfirmResponse| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_id",
            |m: &ConfirmResponse| { &m.mbus_id },
            |m: &mut ConfirmResponse| { &mut m.mbus_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "wait",
            |m: &ConfirmResponse| { &m.wait },
            |m: &mut ConfirmResponse| { &mut m.wait },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "err",
            |m: &ConfirmResponse| { &m.err },
            |m: &mut ConfirmResponse| { &mut m.err },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConfirmResponse>(
            "ConfirmResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConfirmResponse {
    const NAME: &'static str = "ConfirmResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                17 => {
                    self.mbus_id = is.read_fixed64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.wait)?;
                },
                34 => {
                    self.err = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if self.mbus_id != 0 {
            my_size += 1 + 8;
        }
        if let Some(v) = self.wait.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.err.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if self.mbus_id != 0 {
            os.write_fixed64(2, self.mbus_id)?;
        }
        if let Some(v) = self.wait.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.err.is_empty() {
            os.write_string(4, &self.err)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConfirmResponse {
        ConfirmResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.mbus_id = 0;
        self.wait.clear();
        self.err.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConfirmResponse {
        static instance: ConfirmResponse = ConfirmResponse {
            ok: false,
            mbus_id: 0,
            wait: ::protobuf::MessageField::none(),
            err: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConfirmResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConfirmResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConfirmResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfirmResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.Content)
pub struct Content {
    // message fields
    // @@protoc_insertion_point(field:api.Content.entity)
    pub entity: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.Content.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Content {
    fn default() -> &'a Content {
        <Content as ::protobuf::Message>::default_instance()
    }
}

impl Content {
    pub fn new() -> Content {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entity",
            |m: &Content| { &m.entity },
            |m: &mut Content| { &mut m.entity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Content>(
            "Content",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Content {
    const NAME: &'static str = "Content";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entity = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.entity.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.entity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.entity.is_empty() {
            os.write_bytes(1, &self.entity)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Content {
        Content::new()
    }

    fn clear(&mut self) {
        self.entity.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Content {
        static instance: Content = Content {
            entity: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Content {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Content").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Content {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Content {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.Supply)
pub struct Supply {
    // message fields
    // @@protoc_insertion_point(field:api.Supply.id)
    pub id: u64,
    // @@protoc_insertion_point(field:api.Supply.sender_id)
    pub sender_id: u64,
    // @@protoc_insertion_point(field:api.Supply.target_id)
    pub target_id: u64,
    // @@protoc_insertion_point(field:api.Supply.channel_type)
    pub channel_type: u32,
    // @@protoc_insertion_point(field:api.Supply.supply_name)
    pub supply_name: ::std::string::String,
    // @@protoc_insertion_point(field:api.Supply.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:api.Supply.arg_json)
    pub arg_json: ::std::string::String,
    // @@protoc_insertion_point(field:api.Supply.mbus_id)
    pub mbus_id: u64,
    // @@protoc_insertion_point(field:api.Supply.cdata)
    pub cdata: ::protobuf::MessageField<Content>,
    // special fields
    // @@protoc_insertion_point(special_field:api.Supply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Supply {
    fn default() -> &'a Supply {
        <Supply as ::protobuf::Message>::default_instance()
    }
}

impl Supply {
    pub fn new() -> Supply {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Supply| { &m.id },
            |m: &mut Supply| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender_id",
            |m: &Supply| { &m.sender_id },
            |m: &mut Supply| { &mut m.sender_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_id",
            |m: &Supply| { &m.target_id },
            |m: &mut Supply| { &mut m.target_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_type",
            |m: &Supply| { &m.channel_type },
            |m: &mut Supply| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "supply_name",
            |m: &Supply| { &m.supply_name },
            |m: &mut Supply| { &mut m.supply_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &Supply| { &m.ts },
            |m: &mut Supply| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_json",
            |m: &Supply| { &m.arg_json },
            |m: &mut Supply| { &mut m.arg_json },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_id",
            |m: &Supply| { &m.mbus_id },
            |m: &mut Supply| { &mut m.mbus_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Content>(
            "cdata",
            |m: &Supply| { &m.cdata },
            |m: &mut Supply| { &mut m.cdata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Supply>(
            "Supply",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Supply {
    const NAME: &'static str = "Supply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.id = is.read_fixed64()?;
                },
                17 => {
                    self.sender_id = is.read_fixed64()?;
                },
                25 => {
                    self.target_id = is.read_fixed64()?;
                },
                32 => {
                    self.channel_type = is.read_uint32()?;
                },
                42 => {
                    self.supply_name = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                58 => {
                    self.arg_json = is.read_string()?;
                },
                65 => {
                    self.mbus_id = is.read_fixed64()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cdata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += 1 + 8;
        }
        if self.sender_id != 0 {
            my_size += 1 + 8;
        }
        if self.target_id != 0 {
            my_size += 1 + 8;
        }
        if self.channel_type != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.channel_type);
        }
        if !self.supply_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.supply_name);
        }
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.arg_json.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.arg_json);
        }
        if self.mbus_id != 0 {
            my_size += 1 + 8;
        }
        if let Some(v) = self.cdata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_fixed64(1, self.id)?;
        }
        if self.sender_id != 0 {
            os.write_fixed64(2, self.sender_id)?;
        }
        if self.target_id != 0 {
            os.write_fixed64(3, self.target_id)?;
        }
        if self.channel_type != 0 {
            os.write_uint32(4, self.channel_type)?;
        }
        if !self.supply_name.is_empty() {
            os.write_string(5, &self.supply_name)?;
        }
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if !self.arg_json.is_empty() {
            os.write_string(7, &self.arg_json)?;
        }
        if self.mbus_id != 0 {
            os.write_fixed64(8, self.mbus_id)?;
        }
        if let Some(v) = self.cdata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Supply {
        Supply::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.sender_id = 0;
        self.target_id = 0;
        self.channel_type = 0;
        self.supply_name.clear();
        self.ts.clear();
        self.arg_json.clear();
        self.mbus_id = 0;
        self.cdata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Supply {
        static instance: Supply = Supply {
            id: 0,
            sender_id: 0,
            target_id: 0,
            channel_type: 0,
            supply_name: ::std::string::String::new(),
            ts: ::protobuf::MessageField::none(),
            arg_json: ::std::string::String::new(),
            mbus_id: 0,
            cdata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Supply {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Supply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Supply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Supply {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.Demand)
pub struct Demand {
    // message fields
    // @@protoc_insertion_point(field:api.Demand.id)
    pub id: u64,
    // @@protoc_insertion_point(field:api.Demand.sender_id)
    pub sender_id: u64,
    // @@protoc_insertion_point(field:api.Demand.target_id)
    pub target_id: u64,
    // @@protoc_insertion_point(field:api.Demand.channel_type)
    pub channel_type: u32,
    // @@protoc_insertion_point(field:api.Demand.demand_name)
    pub demand_name: ::std::string::String,
    // @@protoc_insertion_point(field:api.Demand.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:api.Demand.arg_json)
    pub arg_json: ::std::string::String,
    // @@protoc_insertion_point(field:api.Demand.mbus_id)
    pub mbus_id: u64,
    // @@protoc_insertion_point(field:api.Demand.cdata)
    pub cdata: ::protobuf::MessageField<Content>,
    // special fields
    // @@protoc_insertion_point(special_field:api.Demand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Demand {
    fn default() -> &'a Demand {
        <Demand as ::protobuf::Message>::default_instance()
    }
}

impl Demand {
    pub fn new() -> Demand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Demand| { &m.id },
            |m: &mut Demand| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender_id",
            |m: &Demand| { &m.sender_id },
            |m: &mut Demand| { &mut m.sender_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_id",
            |m: &Demand| { &m.target_id },
            |m: &mut Demand| { &mut m.target_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_type",
            |m: &Demand| { &m.channel_type },
            |m: &mut Demand| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "demand_name",
            |m: &Demand| { &m.demand_name },
            |m: &mut Demand| { &mut m.demand_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &Demand| { &m.ts },
            |m: &mut Demand| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_json",
            |m: &Demand| { &m.arg_json },
            |m: &mut Demand| { &mut m.arg_json },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_id",
            |m: &Demand| { &m.mbus_id },
            |m: &mut Demand| { &mut m.mbus_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Content>(
            "cdata",
            |m: &Demand| { &m.cdata },
            |m: &mut Demand| { &mut m.cdata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Demand>(
            "Demand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Demand {
    const NAME: &'static str = "Demand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.id = is.read_fixed64()?;
                },
                17 => {
                    self.sender_id = is.read_fixed64()?;
                },
                25 => {
                    self.target_id = is.read_fixed64()?;
                },
                32 => {
                    self.channel_type = is.read_uint32()?;
                },
                42 => {
                    self.demand_name = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                58 => {
                    self.arg_json = is.read_string()?;
                },
                65 => {
                    self.mbus_id = is.read_fixed64()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cdata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += 1 + 8;
        }
        if self.sender_id != 0 {
            my_size += 1 + 8;
        }
        if self.target_id != 0 {
            my_size += 1 + 8;
        }
        if self.channel_type != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.channel_type);
        }
        if !self.demand_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.demand_name);
        }
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.arg_json.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.arg_json);
        }
        if self.mbus_id != 0 {
            my_size += 1 + 8;
        }
        if let Some(v) = self.cdata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_fixed64(1, self.id)?;
        }
        if self.sender_id != 0 {
            os.write_fixed64(2, self.sender_id)?;
        }
        if self.target_id != 0 {
            os.write_fixed64(3, self.target_id)?;
        }
        if self.channel_type != 0 {
            os.write_uint32(4, self.channel_type)?;
        }
        if !self.demand_name.is_empty() {
            os.write_string(5, &self.demand_name)?;
        }
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if !self.arg_json.is_empty() {
            os.write_string(7, &self.arg_json)?;
        }
        if self.mbus_id != 0 {
            os.write_fixed64(8, self.mbus_id)?;
        }
        if let Some(v) = self.cdata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Demand {
        Demand::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.sender_id = 0;
        self.target_id = 0;
        self.channel_type = 0;
        self.demand_name.clear();
        self.ts.clear();
        self.arg_json.clear();
        self.mbus_id = 0;
        self.cdata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Demand {
        static instance: Demand = Demand {
            id: 0,
            sender_id: 0,
            target_id: 0,
            channel_type: 0,
            demand_name: ::std::string::String::new(),
            ts: ::protobuf::MessageField::none(),
            arg_json: ::std::string::String::new(),
            mbus_id: 0,
            cdata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Demand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Demand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Demand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Demand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.Target)
pub struct Target {
    // message fields
    // @@protoc_insertion_point(field:api.Target.id)
    pub id: u64,
    // @@protoc_insertion_point(field:api.Target.sender_id)
    pub sender_id: u64,
    // @@protoc_insertion_point(field:api.Target.target_id)
    pub target_id: u64,
    // @@protoc_insertion_point(field:api.Target.channel_type)
    pub channel_type: u32,
    // @@protoc_insertion_point(field:api.Target.wait)
    pub wait: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:api.Target.mbus_id)
    pub mbus_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:api.Target.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Target {
    fn default() -> &'a Target {
        <Target as ::protobuf::Message>::default_instance()
    }
}

impl Target {
    pub fn new() -> Target {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Target| { &m.id },
            |m: &mut Target| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender_id",
            |m: &Target| { &m.sender_id },
            |m: &mut Target| { &mut m.sender_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_id",
            |m: &Target| { &m.target_id },
            |m: &mut Target| { &mut m.target_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_type",
            |m: &Target| { &m.channel_type },
            |m: &mut Target| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "wait",
            |m: &Target| { &m.wait },
            |m: &mut Target| { &mut m.wait },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_id",
            |m: &Target| { &m.mbus_id },
            |m: &mut Target| { &mut m.mbus_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Target>(
            "Target",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Target {
    const NAME: &'static str = "Target";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.id = is.read_fixed64()?;
                },
                17 => {
                    self.sender_id = is.read_fixed64()?;
                },
                25 => {
                    self.target_id = is.read_fixed64()?;
                },
                32 => {
                    self.channel_type = is.read_uint32()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.wait)?;
                },
                49 => {
                    self.mbus_id = is.read_fixed64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += 1 + 8;
        }
        if self.sender_id != 0 {
            my_size += 1 + 8;
        }
        if self.target_id != 0 {
            my_size += 1 + 8;
        }
        if self.channel_type != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.channel_type);
        }
        if let Some(v) = self.wait.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.mbus_id != 0 {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_fixed64(1, self.id)?;
        }
        if self.sender_id != 0 {
            os.write_fixed64(2, self.sender_id)?;
        }
        if self.target_id != 0 {
            os.write_fixed64(3, self.target_id)?;
        }
        if self.channel_type != 0 {
            os.write_uint32(4, self.channel_type)?;
        }
        if let Some(v) = self.wait.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.mbus_id != 0 {
            os.write_fixed64(6, self.mbus_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Target {
        Target::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.sender_id = 0;
        self.target_id = 0;
        self.channel_type = 0;
        self.wait.clear();
        self.mbus_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Target {
        static instance: Target = Target {
            id: 0,
            sender_id: 0,
            target_id: 0,
            channel_type: 0,
            wait: ::protobuf::MessageField::none(),
            mbus_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Target {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Target").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Target {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Target {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.Channel)
pub struct Channel {
    // message fields
    // @@protoc_insertion_point(field:api.Channel.client_id)
    pub client_id: u64,
    // @@protoc_insertion_point(field:api.Channel.channel_type)
    pub channel_type: u32,
    // @@protoc_insertion_point(field:api.Channel.arg_json)
    pub arg_json: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.Channel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Channel {
    fn default() -> &'a Channel {
        <Channel as ::protobuf::Message>::default_instance()
    }
}

impl Channel {
    pub fn new() -> Channel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &Channel| { &m.client_id },
            |m: &mut Channel| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_type",
            |m: &Channel| { &m.channel_type },
            |m: &mut Channel| { &mut m.channel_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_json",
            |m: &Channel| { &m.arg_json },
            |m: &mut Channel| { &mut m.arg_json },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Channel>(
            "Channel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Channel {
    const NAME: &'static str = "Channel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.client_id = is.read_fixed64()?;
                },
                16 => {
                    self.channel_type = is.read_uint32()?;
                },
                26 => {
                    self.arg_json = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += 1 + 8;
        }
        if self.channel_type != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.channel_type);
        }
        if !self.arg_json.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.arg_json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.client_id != 0 {
            os.write_fixed64(1, self.client_id)?;
        }
        if self.channel_type != 0 {
            os.write_uint32(2, self.channel_type)?;
        }
        if !self.arg_json.is_empty() {
            os.write_string(3, &self.arg_json)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Channel {
        Channel::new()
    }

    fn clear(&mut self) {
        self.client_id = 0;
        self.channel_type = 0;
        self.arg_json.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Channel {
        static instance: Channel = Channel {
            client_id: 0,
            channel_type: 0,
            arg_json: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Channel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Channel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Channel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Channel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.Mbus)
pub struct Mbus {
    // message fields
    // @@protoc_insertion_point(field:api.Mbus.client_id)
    pub client_id: u64,
    // @@protoc_insertion_point(field:api.Mbus.mbus_id)
    pub mbus_id: u64,
    // @@protoc_insertion_point(field:api.Mbus.arg_json)
    pub arg_json: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.Mbus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Mbus {
    fn default() -> &'a Mbus {
        <Mbus as ::protobuf::Message>::default_instance()
    }
}

impl Mbus {
    pub fn new() -> Mbus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &Mbus| { &m.client_id },
            |m: &mut Mbus| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_id",
            |m: &Mbus| { &m.mbus_id },
            |m: &mut Mbus| { &mut m.mbus_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_json",
            |m: &Mbus| { &m.arg_json },
            |m: &mut Mbus| { &mut m.arg_json },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Mbus>(
            "Mbus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Mbus {
    const NAME: &'static str = "Mbus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.client_id = is.read_fixed64()?;
                },
                17 => {
                    self.mbus_id = is.read_fixed64()?;
                },
                26 => {
                    self.arg_json = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += 1 + 8;
        }
        if self.mbus_id != 0 {
            my_size += 1 + 8;
        }
        if !self.arg_json.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.arg_json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.client_id != 0 {
            os.write_fixed64(1, self.client_id)?;
        }
        if self.mbus_id != 0 {
            os.write_fixed64(2, self.mbus_id)?;
        }
        if !self.arg_json.is_empty() {
            os.write_string(3, &self.arg_json)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Mbus {
        Mbus::new()
    }

    fn clear(&mut self) {
        self.client_id = 0;
        self.mbus_id = 0;
        self.arg_json.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Mbus {
        static instance: Mbus = Mbus {
            client_id: 0,
            mbus_id: 0,
            arg_json: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Mbus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Mbus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Mbus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mbus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.MbusMsg)
pub struct MbusMsg {
    // message fields
    // @@protoc_insertion_point(field:api.MbusMsg.msg_id)
    pub msg_id: u64,
    // @@protoc_insertion_point(field:api.MbusMsg.sender_id)
    pub sender_id: u64,
    // @@protoc_insertion_point(field:api.MbusMsg.target_id)
    pub target_id: u64,
    // @@protoc_insertion_point(field:api.MbusMsg.mbus_id)
    pub mbus_id: u64,
    // @@protoc_insertion_point(field:api.MbusMsg.msg_type)
    pub msg_type: u32,
    // @@protoc_insertion_point(field:api.MbusMsg.msg_info)
    pub msg_info: ::std::string::String,
    // @@protoc_insertion_point(field:api.MbusMsg.arg_json)
    pub arg_json: ::std::string::String,
    // @@protoc_insertion_point(field:api.MbusMsg.cdata)
    pub cdata: ::protobuf::MessageField<Content>,
    // special fields
    // @@protoc_insertion_point(special_field:api.MbusMsg.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MbusMsg {
    fn default() -> &'a MbusMsg {
        <MbusMsg as ::protobuf::Message>::default_instance()
    }
}

impl MbusMsg {
    pub fn new() -> MbusMsg {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_id",
            |m: &MbusMsg| { &m.msg_id },
            |m: &mut MbusMsg| { &mut m.msg_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender_id",
            |m: &MbusMsg| { &m.sender_id },
            |m: &mut MbusMsg| { &mut m.sender_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_id",
            |m: &MbusMsg| { &m.target_id },
            |m: &mut MbusMsg| { &mut m.target_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_id",
            |m: &MbusMsg| { &m.mbus_id },
            |m: &mut MbusMsg| { &mut m.mbus_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type",
            |m: &MbusMsg| { &m.msg_type },
            |m: &mut MbusMsg| { &mut m.msg_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_info",
            |m: &MbusMsg| { &m.msg_info },
            |m: &mut MbusMsg| { &mut m.msg_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_json",
            |m: &MbusMsg| { &m.arg_json },
            |m: &mut MbusMsg| { &mut m.arg_json },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Content>(
            "cdata",
            |m: &MbusMsg| { &m.cdata },
            |m: &mut MbusMsg| { &mut m.cdata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MbusMsg>(
            "MbusMsg",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MbusMsg {
    const NAME: &'static str = "MbusMsg";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.msg_id = is.read_fixed64()?;
                },
                17 => {
                    self.sender_id = is.read_fixed64()?;
                },
                25 => {
                    self.target_id = is.read_fixed64()?;
                },
                33 => {
                    self.mbus_id = is.read_fixed64()?;
                },
                40 => {
                    self.msg_type = is.read_uint32()?;
                },
                50 => {
                    self.msg_info = is.read_string()?;
                },
                58 => {
                    self.arg_json = is.read_string()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cdata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.msg_id != 0 {
            my_size += 1 + 8;
        }
        if self.sender_id != 0 {
            my_size += 1 + 8;
        }
        if self.target_id != 0 {
            my_size += 1 + 8;
        }
        if self.mbus_id != 0 {
            my_size += 1 + 8;
        }
        if self.msg_type != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.msg_type);
        }
        if !self.msg_info.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.msg_info);
        }
        if !self.arg_json.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.arg_json);
        }
        if let Some(v) = self.cdata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.msg_id != 0 {
            os.write_fixed64(1, self.msg_id)?;
        }
        if self.sender_id != 0 {
            os.write_fixed64(2, self.sender_id)?;
        }
        if self.target_id != 0 {
            os.write_fixed64(3, self.target_id)?;
        }
        if self.mbus_id != 0 {
            os.write_fixed64(4, self.mbus_id)?;
        }
        if self.msg_type != 0 {
            os.write_uint32(5, self.msg_type)?;
        }
        if !self.msg_info.is_empty() {
            os.write_string(6, &self.msg_info)?;
        }
        if !self.arg_json.is_empty() {
            os.write_string(7, &self.arg_json)?;
        }
        if let Some(v) = self.cdata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MbusMsg {
        MbusMsg::new()
    }

    fn clear(&mut self) {
        self.msg_id = 0;
        self.sender_id = 0;
        self.target_id = 0;
        self.mbus_id = 0;
        self.msg_type = 0;
        self.msg_info.clear();
        self.arg_json.clear();
        self.cdata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MbusMsg {
        static instance: MbusMsg = MbusMsg {
            msg_id: 0,
            sender_id: 0,
            target_id: 0,
            mbus_id: 0,
            msg_type: 0,
            msg_info: ::std::string::String::new(),
            arg_json: ::std::string::String::new(),
            cdata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MbusMsg {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MbusMsg").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MbusMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MbusMsg {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.MbusOpt)
pub struct MbusOpt {
    // message fields
    // @@protoc_insertion_point(field:api.MbusOpt.mbus_type)
    pub mbus_type: ::protobuf::EnumOrUnknown<mbus_opt::MbusType>,
    // @@protoc_insertion_point(field:api.MbusOpt.subscribers)
    pub subscribers: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:api.MbusOpt.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MbusOpt {
    fn default() -> &'a MbusOpt {
        <MbusOpt as ::protobuf::Message>::default_instance()
    }
}

impl MbusOpt {
    pub fn new() -> MbusOpt {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_type",
            |m: &MbusOpt| { &m.mbus_type },
            |m: &mut MbusOpt| { &mut m.mbus_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "subscribers",
            |m: &MbusOpt| { &m.subscribers },
            |m: &mut MbusOpt| { &mut m.subscribers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MbusOpt>(
            "MbusOpt",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MbusOpt {
    const NAME: &'static str = "MbusOpt";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mbus_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    is.read_repeated_packed_fixed64_into(&mut self.subscribers)?;
                },
                17 => {
                    self.subscribers.push(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.mbus_type != ::protobuf::EnumOrUnknown::new(mbus_opt::MbusType::PUBLIC) {
            my_size += ::protobuf::rt::int32_size(1, self.mbus_type.value());
        }
        my_size += 9 * self.subscribers.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.mbus_type != ::protobuf::EnumOrUnknown::new(mbus_opt::MbusType::PUBLIC) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.mbus_type))?;
        }
        for v in &self.subscribers {
            os.write_fixed64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MbusOpt {
        MbusOpt::new()
    }

    fn clear(&mut self) {
        self.mbus_type = ::protobuf::EnumOrUnknown::new(mbus_opt::MbusType::PUBLIC);
        self.subscribers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MbusOpt {
        static instance: MbusOpt = MbusOpt {
            mbus_type: ::protobuf::EnumOrUnknown::from_i32(0),
            subscribers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MbusOpt {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MbusOpt").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MbusOpt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MbusOpt {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MbusOpt`
pub mod mbus_opt {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:api.MbusOpt.MbusType)
    pub enum MbusType {
        // @@protoc_insertion_point(enum_value:api.MbusOpt.MbusType.PUBLIC)
        PUBLIC = 0,
        // @@protoc_insertion_point(enum_value:api.MbusOpt.MbusType.PRIVATE)
        PRIVATE = 1,
    }

    impl ::protobuf::Enum for MbusType {
        const NAME: &'static str = "MbusType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<MbusType> {
            match value {
                0 => ::std::option::Option::Some(MbusType::PUBLIC),
                1 => ::std::option::Option::Some(MbusType::PRIVATE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [MbusType] = &[
            MbusType::PUBLIC,
            MbusType::PRIVATE,
        ];
    }

    impl ::protobuf::EnumFull for MbusType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MbusOpt.MbusType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for MbusType {
        fn default() -> Self {
            MbusType::PUBLIC
        }
    }

    impl MbusType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MbusType>("MbusOpt.MbusType")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.MbusState)
pub struct MbusState {
    // message fields
    // @@protoc_insertion_point(field:api.MbusState.mbus_id)
    pub mbus_id: u64,
    // @@protoc_insertion_point(field:api.MbusState.status)
    pub status: ::protobuf::EnumOrUnknown<mbus_state::MbusStatus>,
    // @@protoc_insertion_point(field:api.MbusState.subscribers)
    pub subscribers: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:api.MbusState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MbusState {
    fn default() -> &'a MbusState {
        <MbusState as ::protobuf::Message>::default_instance()
    }
}

impl MbusState {
    pub fn new() -> MbusState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mbus_id",
            |m: &MbusState| { &m.mbus_id },
            |m: &mut MbusState| { &mut m.mbus_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &MbusState| { &m.status },
            |m: &mut MbusState| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "subscribers",
            |m: &MbusState| { &m.subscribers },
            |m: &mut MbusState| { &mut m.subscribers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MbusState>(
            "MbusState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MbusState {
    const NAME: &'static str = "MbusState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.mbus_id = is.read_fixed64()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                26 => {
                    is.read_repeated_packed_fixed64_into(&mut self.subscribers)?;
                },
                25 => {
                    self.subscribers.push(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.mbus_id != 0 {
            my_size += 1 + 8;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(mbus_state::MbusStatus::INTIALIZED) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        my_size += 9 * self.subscribers.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.mbus_id != 0 {
            os.write_fixed64(1, self.mbus_id)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(mbus_state::MbusStatus::INTIALIZED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        for v in &self.subscribers {
            os.write_fixed64(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MbusState {
        MbusState::new()
    }

    fn clear(&mut self) {
        self.mbus_id = 0;
        self.status = ::protobuf::EnumOrUnknown::new(mbus_state::MbusStatus::INTIALIZED);
        self.subscribers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MbusState {
        static instance: MbusState = MbusState {
            mbus_id: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            subscribers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MbusState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MbusState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MbusState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MbusState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MbusState`
pub mod mbus_state {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:api.MbusState.MbusStatus)
    pub enum MbusStatus {
        // @@protoc_insertion_point(enum_value:api.MbusState.MbusStatus.INTIALIZED)
        INTIALIZED = 0,
        // @@protoc_insertion_point(enum_value:api.MbusState.MbusStatus.SUBSCRIBERS)
        SUBSCRIBERS = 1,
        // @@protoc_insertion_point(enum_value:api.MbusState.MbusStatus.CLOSED)
        CLOSED = 2,
        // @@protoc_insertion_point(enum_value:api.MbusState.MbusStatus.INVALID)
        INVALID = 3,
    }

    impl ::protobuf::Enum for MbusStatus {
        const NAME: &'static str = "MbusStatus";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<MbusStatus> {
            match value {
                0 => ::std::option::Option::Some(MbusStatus::INTIALIZED),
                1 => ::std::option::Option::Some(MbusStatus::SUBSCRIBERS),
                2 => ::std::option::Option::Some(MbusStatus::CLOSED),
                3 => ::std::option::Option::Some(MbusStatus::INVALID),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [MbusStatus] = &[
            MbusStatus::INTIALIZED,
            MbusStatus::SUBSCRIBERS,
            MbusStatus::CLOSED,
            MbusStatus::INVALID,
        ];
    }

    impl ::protobuf::EnumFull for MbusStatus {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MbusState.MbusStatus").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for MbusStatus {
        fn default() -> Self {
            MbusStatus::INTIALIZED
        }
    }

    impl MbusStatus {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MbusStatus>("MbusState.MbusStatus")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.GatewayInfo)
pub struct GatewayInfo {
    // message fields
    // @@protoc_insertion_point(field:api.GatewayInfo.client_id)
    pub client_id: u64,
    // @@protoc_insertion_point(field:api.GatewayInfo.gateway_type)
    pub gateway_type: ::protobuf::EnumOrUnknown<GatewayType>,
    // @@protoc_insertion_point(field:api.GatewayInfo.channels)
    pub channels: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:api.GatewayInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GatewayInfo {
    fn default() -> &'a GatewayInfo {
        <GatewayInfo as ::protobuf::Message>::default_instance()
    }
}

impl GatewayInfo {
    pub fn new() -> GatewayInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &GatewayInfo| { &m.client_id },
            |m: &mut GatewayInfo| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gateway_type",
            |m: &GatewayInfo| { &m.gateway_type },
            |m: &mut GatewayInfo| { &mut m.gateway_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "channels",
            |m: &GatewayInfo| { &m.channels },
            |m: &mut GatewayInfo| { &mut m.channels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GatewayInfo>(
            "GatewayInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GatewayInfo {
    const NAME: &'static str = "GatewayInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.client_id = is.read_fixed64()?;
                },
                16 => {
                    self.gateway_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.channels)?;
                },
                24 => {
                    self.channels.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += 1 + 8;
        }
        if self.gateway_type != ::protobuf::EnumOrUnknown::new(GatewayType::BIDIRECTIONAL) {
            my_size += ::protobuf::rt::int32_size(2, self.gateway_type.value());
        }
        for value in &self.channels {
            my_size += ::protobuf::rt::uint32_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.client_id != 0 {
            os.write_fixed64(1, self.client_id)?;
        }
        if self.gateway_type != ::protobuf::EnumOrUnknown::new(GatewayType::BIDIRECTIONAL) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.gateway_type))?;
        }
        for v in &self.channels {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GatewayInfo {
        GatewayInfo::new()
    }

    fn clear(&mut self) {
        self.client_id = 0;
        self.gateway_type = ::protobuf::EnumOrUnknown::new(GatewayType::BIDIRECTIONAL);
        self.channels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GatewayInfo {
        static instance: GatewayInfo = GatewayInfo {
            client_id: 0,
            gateway_type: ::protobuf::EnumOrUnknown::from_i32(0),
            channels: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GatewayInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GatewayInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GatewayInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.GatewayMsg)
pub struct GatewayMsg {
    // message fields
    // @@protoc_insertion_point(field:api.GatewayMsg.src_synerex_id)
    pub src_synerex_id: u64,
    // @@protoc_insertion_point(field:api.GatewayMsg.msg_type)
    pub msg_type: ::protobuf::EnumOrUnknown<MsgType>,
    // message oneof groups
    pub msg_oneof: ::std::option::Option<gateway_msg::Msg_oneof>,
    // special fields
    // @@protoc_insertion_point(special_field:api.GatewayMsg.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GatewayMsg {
    fn default() -> &'a GatewayMsg {
        <GatewayMsg as ::protobuf::Message>::default_instance()
    }
}

impl GatewayMsg {
    pub fn new() -> GatewayMsg {
        ::std::default::Default::default()
    }

    // .api.Demand demand = 3;

    pub fn demand(&self) -> &Demand {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(ref v)) => v,
            _ => <Demand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_demand(&mut self) {
        self.msg_oneof = ::std::option::Option::None;
    }

    pub fn has_demand(&self) -> bool {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_demand(&mut self, v: Demand) {
        self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(v))
    }

    // Mutable pointer to the field.
    pub fn mut_demand(&mut self) -> &mut Demand {
        if let ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(_)) = self.msg_oneof {
        } else {
            self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(Demand::new()));
        }
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_demand(&mut self) -> Demand {
        if self.has_demand() {
            match self.msg_oneof.take() {
                ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(v)) => v,
                _ => panic!(),
            }
        } else {
            Demand::new()
        }
    }

    // .api.Supply supply = 4;

    pub fn supply(&self) -> &Supply {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(ref v)) => v,
            _ => <Supply as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_supply(&mut self) {
        self.msg_oneof = ::std::option::Option::None;
    }

    pub fn has_supply(&self) -> bool {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_supply(&mut self, v: Supply) {
        self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(v))
    }

    // Mutable pointer to the field.
    pub fn mut_supply(&mut self) -> &mut Supply {
        if let ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(_)) = self.msg_oneof {
        } else {
            self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(Supply::new()));
        }
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_supply(&mut self) -> Supply {
        if self.has_supply() {
            match self.msg_oneof.take() {
                ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(v)) => v,
                _ => panic!(),
            }
        } else {
            Supply::new()
        }
    }

    // .api.Target target = 5;

    pub fn target(&self) -> &Target {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(ref v)) => v,
            _ => <Target as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_target(&mut self) {
        self.msg_oneof = ::std::option::Option::None;
    }

    pub fn has_target(&self) -> bool {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: Target) {
        self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(v))
    }

    // Mutable pointer to the field.
    pub fn mut_target(&mut self) -> &mut Target {
        if let ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(_)) = self.msg_oneof {
        } else {
            self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(Target::new()));
        }
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_target(&mut self) -> Target {
        if self.has_target() {
            match self.msg_oneof.take() {
                ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(v)) => v,
                _ => panic!(),
            }
        } else {
            Target::new()
        }
    }

    // .api.Mbus mbus = 6;

    pub fn mbus(&self) -> &Mbus {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(ref v)) => v,
            _ => <Mbus as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_mbus(&mut self) {
        self.msg_oneof = ::std::option::Option::None;
    }

    pub fn has_mbus(&self) -> bool {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mbus(&mut self, v: Mbus) {
        self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mbus(&mut self) -> &mut Mbus {
        if let ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(_)) = self.msg_oneof {
        } else {
            self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(Mbus::new()));
        }
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mbus(&mut self) -> Mbus {
        if self.has_mbus() {
            match self.msg_oneof.take() {
                ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(v)) => v,
                _ => panic!(),
            }
        } else {
            Mbus::new()
        }
    }

    // .api.MbusMsg mbus_msg = 7;

    pub fn mbus_msg(&self) -> &MbusMsg {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(ref v)) => v,
            _ => <MbusMsg as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_mbus_msg(&mut self) {
        self.msg_oneof = ::std::option::Option::None;
    }

    pub fn has_mbus_msg(&self) -> bool {
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mbus_msg(&mut self, v: MbusMsg) {
        self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mbus_msg(&mut self) -> &mut MbusMsg {
        if let ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(_)) = self.msg_oneof {
        } else {
            self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(MbusMsg::new()));
        }
        match self.msg_oneof {
            ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mbus_msg(&mut self) -> MbusMsg {
        if self.has_mbus_msg() {
            match self.msg_oneof.take() {
                ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(v)) => v,
                _ => panic!(),
            }
        } else {
            MbusMsg::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src_synerex_id",
            |m: &GatewayMsg| { &m.src_synerex_id },
            |m: &mut GatewayMsg| { &mut m.src_synerex_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type",
            |m: &GatewayMsg| { &m.msg_type },
            |m: &mut GatewayMsg| { &mut m.msg_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Demand>(
            "demand",
            GatewayMsg::has_demand,
            GatewayMsg::demand,
            GatewayMsg::mut_demand,
            GatewayMsg::set_demand,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Supply>(
            "supply",
            GatewayMsg::has_supply,
            GatewayMsg::supply,
            GatewayMsg::mut_supply,
            GatewayMsg::set_supply,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Target>(
            "target",
            GatewayMsg::has_target,
            GatewayMsg::target,
            GatewayMsg::mut_target,
            GatewayMsg::set_target,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Mbus>(
            "mbus",
            GatewayMsg::has_mbus,
            GatewayMsg::mbus,
            GatewayMsg::mut_mbus,
            GatewayMsg::set_mbus,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MbusMsg>(
            "mbus_msg",
            GatewayMsg::has_mbus_msg,
            GatewayMsg::mbus_msg,
            GatewayMsg::mut_mbus_msg,
            GatewayMsg::set_mbus_msg,
        ));
        oneofs.push(gateway_msg::Msg_oneof::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GatewayMsg>(
            "GatewayMsg",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GatewayMsg {
    const NAME: &'static str = "GatewayMsg";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.src_synerex_id = is.read_fixed64()?;
                },
                16 => {
                    self.msg_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Demand(is.read_message()?));
                },
                34 => {
                    self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Supply(is.read_message()?));
                },
                42 => {
                    self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Target(is.read_message()?));
                },
                50 => {
                    self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::Mbus(is.read_message()?));
                },
                58 => {
                    self.msg_oneof = ::std::option::Option::Some(gateway_msg::Msg_oneof::MbusMsg(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.src_synerex_id != 0 {
            my_size += 1 + 8;
        }
        if self.msg_type != ::protobuf::EnumOrUnknown::new(MsgType::DEMAND) {
            my_size += ::protobuf::rt::int32_size(2, self.msg_type.value());
        }
        if let ::std::option::Option::Some(ref v) = self.msg_oneof {
            match v {
                &gateway_msg::Msg_oneof::Demand(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gateway_msg::Msg_oneof::Supply(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gateway_msg::Msg_oneof::Target(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gateway_msg::Msg_oneof::Mbus(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gateway_msg::Msg_oneof::MbusMsg(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.src_synerex_id != 0 {
            os.write_fixed64(1, self.src_synerex_id)?;
        }
        if self.msg_type != ::protobuf::EnumOrUnknown::new(MsgType::DEMAND) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.msg_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg_oneof {
            match v {
                &gateway_msg::Msg_oneof::Demand(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &gateway_msg::Msg_oneof::Supply(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &gateway_msg::Msg_oneof::Target(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &gateway_msg::Msg_oneof::Mbus(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &gateway_msg::Msg_oneof::MbusMsg(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GatewayMsg {
        GatewayMsg::new()
    }

    fn clear(&mut self) {
        self.src_synerex_id = 0;
        self.msg_type = ::protobuf::EnumOrUnknown::new(MsgType::DEMAND);
        self.msg_oneof = ::std::option::Option::None;
        self.msg_oneof = ::std::option::Option::None;
        self.msg_oneof = ::std::option::Option::None;
        self.msg_oneof = ::std::option::Option::None;
        self.msg_oneof = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GatewayMsg {
        static instance: GatewayMsg = GatewayMsg {
            src_synerex_id: 0,
            msg_type: ::protobuf::EnumOrUnknown::from_i32(0),
            msg_oneof: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GatewayMsg {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GatewayMsg").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GatewayMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayMsg {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GatewayMsg`
pub mod gateway_msg {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:api.GatewayMsg.msg_oneof)
    pub enum Msg_oneof {
        // @@protoc_insertion_point(oneof_field:api.GatewayMsg.demand)
        Demand(super::Demand),
        // @@protoc_insertion_point(oneof_field:api.GatewayMsg.supply)
        Supply(super::Supply),
        // @@protoc_insertion_point(oneof_field:api.GatewayMsg.target)
        Target(super::Target),
        // @@protoc_insertion_point(oneof_field:api.GatewayMsg.mbus)
        Mbus(super::Mbus),
        // @@protoc_insertion_point(oneof_field:api.GatewayMsg.mbus_msg)
        MbusMsg(super::MbusMsg),
    }

    impl ::protobuf::Oneof for Msg_oneof {
    }

    impl ::protobuf::OneofFull for Msg_oneof {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GatewayMsg as ::protobuf::MessageFull>::descriptor().oneof_by_name("msg_oneof").unwrap()).clone()
        }
    }

    impl Msg_oneof {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Msg_oneof>("msg_oneof")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.ProviderID)
pub struct ProviderID {
    // message fields
    // @@protoc_insertion_point(field:api.ProviderID.client_id)
    pub client_id: u64,
    // @@protoc_insertion_point(field:api.ProviderID.arg_json)
    pub arg_json: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.ProviderID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProviderID {
    fn default() -> &'a ProviderID {
        <ProviderID as ::protobuf::Message>::default_instance()
    }
}

impl ProviderID {
    pub fn new() -> ProviderID {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &ProviderID| { &m.client_id },
            |m: &mut ProviderID| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arg_json",
            |m: &ProviderID| { &m.arg_json },
            |m: &mut ProviderID| { &mut m.arg_json },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProviderID>(
            "ProviderID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProviderID {
    const NAME: &'static str = "ProviderID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.client_id = is.read_fixed64()?;
                },
                26 => {
                    self.arg_json = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += 1 + 8;
        }
        if !self.arg_json.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.arg_json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.client_id != 0 {
            os.write_fixed64(1, self.client_id)?;
        }
        if !self.arg_json.is_empty() {
            os.write_string(3, &self.arg_json)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProviderID {
        ProviderID::new()
    }

    fn clear(&mut self) {
        self.client_id = 0;
        self.arg_json.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProviderID {
        static instance: ProviderID = ProviderID {
            client_id: 0,
            arg_json: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProviderID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProviderID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProviderID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProviderID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:api.GatewayType)
pub enum GatewayType {
    // @@protoc_insertion_point(enum_value:api.GatewayType.BIDIRECTIONAL)
    BIDIRECTIONAL = 0,
    // @@protoc_insertion_point(enum_value:api.GatewayType.WRITE_ONLY)
    WRITE_ONLY = 1,
    // @@protoc_insertion_point(enum_value:api.GatewayType.READ_ONLY)
    READ_ONLY = 2,
}

impl ::protobuf::Enum for GatewayType {
    const NAME: &'static str = "GatewayType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GatewayType> {
        match value {
            0 => ::std::option::Option::Some(GatewayType::BIDIRECTIONAL),
            1 => ::std::option::Option::Some(GatewayType::WRITE_ONLY),
            2 => ::std::option::Option::Some(GatewayType::READ_ONLY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [GatewayType] = &[
        GatewayType::BIDIRECTIONAL,
        GatewayType::WRITE_ONLY,
        GatewayType::READ_ONLY,
    ];
}

impl ::protobuf::EnumFull for GatewayType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("GatewayType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for GatewayType {
    fn default() -> Self {
        GatewayType::BIDIRECTIONAL
    }
}

impl GatewayType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<GatewayType>("GatewayType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:api.MsgType)
pub enum MsgType {
    // @@protoc_insertion_point(enum_value:api.MsgType.DEMAND)
    DEMAND = 0,
    // @@protoc_insertion_point(enum_value:api.MsgType.SUPPLY)
    SUPPLY = 1,
    // @@protoc_insertion_point(enum_value:api.MsgType.TARGET)
    TARGET = 2,
    // @@protoc_insertion_point(enum_value:api.MsgType.MBUS)
    MBUS = 3,
    // @@protoc_insertion_point(enum_value:api.MsgType.MBUSMSG)
    MBUSMSG = 4,
}

impl ::protobuf::Enum for MsgType {
    const NAME: &'static str = "MsgType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MsgType> {
        match value {
            0 => ::std::option::Option::Some(MsgType::DEMAND),
            1 => ::std::option::Option::Some(MsgType::SUPPLY),
            2 => ::std::option::Option::Some(MsgType::TARGET),
            3 => ::std::option::Option::Some(MsgType::MBUS),
            4 => ::std::option::Option::Some(MsgType::MBUSMSG),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MsgType] = &[
        MsgType::DEMAND,
        MsgType::SUPPLY,
        MsgType::TARGET,
        MsgType::MBUS,
        MsgType::MBUSMSG,
    ];
}

impl ::protobuf::EnumFull for MsgType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MsgType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MsgType {
    fn default() -> Self {
        MsgType::DEMAND
    }
}

impl MsgType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MsgType>("MsgType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rsynerex.proto\x12\x03api\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\
    \x1egoogle/protobuf/duration.proto\",\n\x08Response\x12\x0e\n\x02ok\x18\
    \x01\x20\x01(\x08R\x02ok\x12\x10\n\x03err\x18\x02\x20\x01(\tR\x03err\"{\
    \n\x0fConfirmResponse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\x02ok\x12\
    \x17\n\x07mbus_id\x18\x02\x20\x01(\x06R\x06mbusId\x12-\n\x04wait\x18\x03\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x04wait\x12\x10\n\x03err\
    \x18\x04\x20\x01(\tR\x03err\"!\n\x07Content\x12\x16\n\x06entity\x18\x01\
    \x20\x01(\x0cR\x06entity\"\x9a\x02\n\x06Supply\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x06R\x02id\x12\x1b\n\tsender_id\x18\x02\x20\x01(\x06R\x08sende\
    rId\x12\x1b\n\ttarget_id\x18\x03\x20\x01(\x06R\x08targetId\x12!\n\x0ccha\
    nnel_type\x18\x04\x20\x01(\rR\x0bchannelType\x12\x1f\n\x0bsupply_name\
    \x18\x05\x20\x01(\tR\nsupplyName\x12*\n\x02ts\x18\x06\x20\x01(\x0b2\x1a.\
    google.protobuf.TimestampR\x02ts\x12\x19\n\x08arg_json\x18\x07\x20\x01(\
    \tR\x07argJson\x12\x17\n\x07mbus_id\x18\x08\x20\x01(\x06R\x06mbusId\x12\
    \"\n\x05cdata\x18\t\x20\x01(\x0b2\x0c.api.ContentR\x05cdata\"\x9a\x02\n\
    \x06Demand\x12\x0e\n\x02id\x18\x01\x20\x01(\x06R\x02id\x12\x1b\n\tsender\
    _id\x18\x02\x20\x01(\x06R\x08senderId\x12\x1b\n\ttarget_id\x18\x03\x20\
    \x01(\x06R\x08targetId\x12!\n\x0cchannel_type\x18\x04\x20\x01(\rR\x0bcha\
    nnelType\x12\x1f\n\x0bdemand_name\x18\x05\x20\x01(\tR\ndemandName\x12*\n\
    \x02ts\x18\x06\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02ts\x12\
    \x19\n\x08arg_json\x18\x07\x20\x01(\tR\x07argJson\x12\x17\n\x07mbus_id\
    \x18\x08\x20\x01(\x06R\x06mbusId\x12\"\n\x05cdata\x18\t\x20\x01(\x0b2\
    \x0c.api.ContentR\x05cdata\"\xbd\x01\n\x06Target\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x06R\x02id\x12\x1b\n\tsender_id\x18\x02\x20\x01(\x06R\x08sende\
    rId\x12\x1b\n\ttarget_id\x18\x03\x20\x01(\x06R\x08targetId\x12!\n\x0ccha\
    nnel_type\x18\x04\x20\x01(\rR\x0bchannelType\x12-\n\x04wait\x18\x05\x20\
    \x01(\x0b2\x19.google.protobuf.DurationR\x04wait\x12\x17\n\x07mbus_id\
    \x18\x06\x20\x01(\x06R\x06mbusId\"d\n\x07Channel\x12\x1b\n\tclient_id\
    \x18\x01\x20\x01(\x06R\x08clientId\x12!\n\x0cchannel_type\x18\x02\x20\
    \x01(\rR\x0bchannelType\x12\x19\n\x08arg_json\x18\x03\x20\x01(\tR\x07arg\
    Json\"W\n\x04Mbus\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x06R\x08clientId\
    \x12\x17\n\x07mbus_id\x18\x02\x20\x01(\x06R\x06mbusId\x12\x19\n\x08arg_j\
    son\x18\x03\x20\x01(\tR\x07argJson\"\xe8\x01\n\x07MbusMsg\x12\x15\n\x06m\
    sg_id\x18\x01\x20\x01(\x06R\x05msgId\x12\x1b\n\tsender_id\x18\x02\x20\
    \x01(\x06R\x08senderId\x12\x1b\n\ttarget_id\x18\x03\x20\x01(\x06R\x08tar\
    getId\x12\x17\n\x07mbus_id\x18\x04\x20\x01(\x06R\x06mbusId\x12\x19\n\x08\
    msg_type\x18\x05\x20\x01(\rR\x07msgType\x12\x19\n\x08msg_info\x18\x06\
    \x20\x01(\tR\x07msgInfo\x12\x19\n\x08arg_json\x18\x07\x20\x01(\tR\x07arg\
    Json\x12\"\n\x05cdata\x18\x08\x20\x01(\x0b2\x0c.api.ContentR\x05cdata\"\
    \x84\x01\n\x07MbusOpt\x122\n\tmbus_type\x18\x01\x20\x01(\x0e2\x15.api.Mb\
    usOpt.MbusTypeR\x08mbusType\x12\x20\n\x0bsubscribers\x18\x02\x20\x03(\
    \x06R\x0bsubscribers\"#\n\x08MbusType\x12\n\n\x06PUBLIC\x10\0\x12\x0b\n\
    \x07PRIVATE\x10\x01\"\xc1\x01\n\tMbusState\x12\x17\n\x07mbus_id\x18\x01\
    \x20\x01(\x06R\x06mbusId\x121\n\x06status\x18\x02\x20\x01(\x0e2\x19.api.\
    MbusState.MbusStatusR\x06status\x12\x20\n\x0bsubscribers\x18\x03\x20\x03\
    (\x06R\x0bsubscribers\"F\n\nMbusStatus\x12\x0e\n\nINTIALIZED\x10\0\x12\
    \x0f\n\x0bSUBSCRIBERS\x10\x01\x12\n\n\x06CLOSED\x10\x02\x12\x0b\n\x07INV\
    ALID\x10\x03\"{\n\x0bGatewayInfo\x12\x1b\n\tclient_id\x18\x01\x20\x01(\
    \x06R\x08clientId\x123\n\x0cgateway_type\x18\x02\x20\x01(\x0e2\x10.api.G\
    atewayTypeR\x0bgatewayType\x12\x1a\n\x08channels\x18\x03\x20\x03(\rR\x08\
    channels\"\xa9\x02\n\nGatewayMsg\x12$\n\x0esrc_synerex_id\x18\x01\x20\
    \x01(\x06R\x0csrcSynerexId\x12'\n\x08msg_type\x18\x02\x20\x01(\x0e2\x0c.\
    api.MsgTypeR\x07msgType\x12%\n\x06demand\x18\x03\x20\x01(\x0b2\x0b.api.D\
    emandH\0R\x06demand\x12%\n\x06supply\x18\x04\x20\x01(\x0b2\x0b.api.Suppl\
    yH\0R\x06supply\x12%\n\x06target\x18\x05\x20\x01(\x0b2\x0b.api.TargetH\0\
    R\x06target\x12\x1f\n\x04mbus\x18\x06\x20\x01(\x0b2\t.api.MbusH\0R\x04mb\
    us\x12)\n\x08mbus_msg\x18\x07\x20\x01(\x0b2\x0c.api.MbusMsgH\0R\x07mbusM\
    sgB\x0b\n\tmsg_oneof\"D\n\nProviderID\x12\x1b\n\tclient_id\x18\x01\x20\
    \x01(\x06R\x08clientId\x12\x19\n\x08arg_json\x18\x03\x20\x01(\tR\x07argJ\
    son*?\n\x0bGatewayType\x12\x11\n\rBIDIRECTIONAL\x10\0\x12\x0e\n\nWRITE_O\
    NLY\x10\x01\x12\r\n\tREAD_ONLY\x10\x02*D\n\x07MsgType\x12\n\n\x06DEMAND\
    \x10\0\x12\n\n\x06SUPPLY\x10\x01\x12\n\n\x06TARGET\x10\x02\x12\x08\n\x04\
    MBUS\x10\x03\x12\x0b\n\x07MBUSMSG\x10\x042\xe3\x07\n\x07Synerex\x12,\n\
    \x0cNotifyDemand\x12\x0b.api.Demand\x1a\r.api.Response\"\0\x12,\n\x0cNot\
    ifySupply\x12\x0b.api.Supply\x1a\r.api.Response\"\0\x12-\n\rProposeDeman\
    d\x12\x0b.api.Demand\x1a\r.api.Response\"\0\x12-\n\rProposeSupply\x12\
    \x0b.api.Supply\x1a\r.api.Response\"\0\x123\n\x0cSelectSupply\x12\x0b.ap\
    i.Target\x1a\x14.api.ConfirmResponse\"\0\x12;\n\x14SelectModifiedSupply\
    \x12\x0b.api.Supply\x1a\x14.api.ConfirmResponse\"\0\x123\n\x0cSelectDema\
    nd\x12\x0b.api.Target\x1a\x14.api.ConfirmResponse\"\0\x12'\n\x07Confirm\
    \x12\x0b.api.Target\x1a\r.api.Response\"\0\x120\n\x0fSubscribeDemand\x12\
    \x0c.api.Channel\x1a\x0b.api.Demand\"\00\x01\x120\n\x0fSubscribeSupply\
    \x12\x0c.api.Channel\x1a\x0b.api.Supply\"\00\x01\x12'\n\nCreateMbus\x12\
    \x0c.api.MbusOpt\x1a\t.api.Mbus\"\0\x12'\n\tCloseMbus\x12\t.api.Mbus\x1a\
    \r.api.Response\"\0\x12,\n\rSubscribeMbus\x12\t.api.Mbus\x1a\x0c.api.Mbu\
    sMsg\"\00\x01\x12,\n\x0bSendMbusMsg\x12\x0c.api.MbusMsg\x1a\r.api.Respon\
    se\"\0\x12+\n\x0cGetMbusState\x12\t.api.Mbus\x1a\x0e.api.MbusState\"\0\
    \x129\n\x10SubscribeGateway\x12\x10.api.GatewayInfo\x1a\x0f.api.GatewayM\
    sg\"\00\x01\x124\n\x10ForwardToGateway\x12\x0f.api.GatewayMsg\x1a\r.api.\
    Response\"\0\x123\n\x12CloseDemandChannel\x12\x0c.api.Channel\x1a\r.api.\
    Response\"\0\x123\n\x12CloseSupplyChannel\x12\x0c.api.Channel\x1a\r.api.\
    Response\"\0\x124\n\x10CloseAllChannels\x12\x0f.api.ProviderID\x1a\r.api\
    .Response\"\0B\x20Z\x1egithub.com/synerex/synerex_apib\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(Response::generated_message_descriptor_data());
            messages.push(ConfirmResponse::generated_message_descriptor_data());
            messages.push(Content::generated_message_descriptor_data());
            messages.push(Supply::generated_message_descriptor_data());
            messages.push(Demand::generated_message_descriptor_data());
            messages.push(Target::generated_message_descriptor_data());
            messages.push(Channel::generated_message_descriptor_data());
            messages.push(Mbus::generated_message_descriptor_data());
            messages.push(MbusMsg::generated_message_descriptor_data());
            messages.push(MbusOpt::generated_message_descriptor_data());
            messages.push(MbusState::generated_message_descriptor_data());
            messages.push(GatewayInfo::generated_message_descriptor_data());
            messages.push(GatewayMsg::generated_message_descriptor_data());
            messages.push(ProviderID::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(GatewayType::generated_enum_descriptor_data());
            enums.push(MsgType::generated_enum_descriptor_data());
            enums.push(mbus_opt::MbusType::generated_enum_descriptor_data());
            enums.push(mbus_state::MbusStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
